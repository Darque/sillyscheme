===========================
This is how I waste my time.
============================

STATUS
======

Latest achievement:
    We can run factorial using y-combinator (see tests/fact.scm).

What works:
    Read-Print-Eval Loop works.
    Some builtin arithmetics (fixnum and double), list functions.
    Lambda works, non-builtin function calls work.
    Lexical bindings.

What doesn't:
    No memory management yet.
    Syntax/special forms are almost non-existent.
    No proper tail-calls.
    No continuations.
    Error handling is just not there.

DESIGN
======

INTERPRETER
-----------

As of now, it's a more or less vanilla SECD machine, modified for
varargs and special forms.

INTERNAL REPRESENTATION
-----------------------
Tagged values. scm_val is C 'long'. Lower 3 bits are tags for primitive
types, higher bits are used for pointers in non-primitive types. We rely
on allocation policy granting 8-byte alignment. When memory management is
implemented, this policy will be enforced by allocator.

Primitive types are: CHAR, BOOL, FIXNUM, SYMBOL.

LAMBDA [the ultimate failure] (tm)
----------------------------------
PROCEDURE is a toplevel type.
flags used are SYNTAX, BUILTIN.
PROCEDURE is a cons(DEFINITION, env)
DEFINITION for non-BUILTIN is a cons(formals, body)
DEFINITION for BUILTIN is a cons(CFUNC, hint)
CFUNC is an scm_val (*cfunc)(scm_val params, scm_val env, scm_val hint)

TODO
=====

* read    [x]
* parse   [x]
* eval    [-]
  * symbols [x]
  * env     [x]
  * proc    [-]
    * native    [x]
    * compiled  [x]
    * syntax    [-]
* print   [x]

Next up:
--------
Special forms / macros need some love badly.
